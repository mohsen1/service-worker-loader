// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`service-worker-loader should emit bundle and service worker 1`] = `
"export var ServiceWorkerNoSupportError = (function() {

	function ServiceWorkerNoSupportError() {
		var err = Error.call(this, 'ServiceWorker is not supported.');
		Object.setPrototypeOf(err, ServiceWorkerNoSupportError.prototype);
		return err;
	}

	ServiceWorkerNoSupportError.prototype = Object.create(Error.prototype);

	return ServiceWorkerNoSupportError;
})();

export var scriptUrl = __webpack_public_path__ + \\"serviceWorker.js\\";

export default function registerServiceWorkerIfSupported(mapScriptUrlOrOptions, maybeOptions) {

	var targetScriptUrl = scriptUrl;
	var options = maybeOptions;

	if (typeof mapScriptUrlOrOptions === 'function') {
		targetScriptUrl = mapScriptUrlOrOptions(targetScriptUrl);
	} else {
		options = mapScriptUrlOrOptions;
	}

	if ('serviceWorker' in navigator) {
		return navigator.serviceWorker.register(targetScriptUrl, options);
	}

	return Promise.reject(new ServiceWorkerNoSupportError());
}
"
`;

exports[`service-worker-loader should emit bundle and service worker 2`] = `
"/* eslint-env serviceworker */
/* eslint-disable import/unambiguous */

self.addEventListener('install', () => {
	postMessageToAll({
		action: 'install'
	});
});

self.addEventListener('activate', () => {
	postMessageToAll({
		action: 'activate'
	});
});

self.addEventListener('fetch', (event) => {
	postMessageToAll({
		action:  'fetch',
		payload: event.request.url
	});
});

async function postMessageToAll(message) {

	const clients = await self.clients.matchAll();

	return Promise.all(
		clients.map(client => client.postMessage(message))
	);
}
"
`;
